package resolvers

import (
	"context"
	"encoding/json"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/ethclient"
	core "github.com/iden3/go-iden3-core/v2"
	"github.com/iden3/go-iden3-core/v2/w3c"
	"github.com/iden3/go-schema-processor/v2/verifiable"
	"github.com/jarcoal/httpmock"
	"github.com/stretchr/testify/require"
)

func TestOnChainResolver(t *testing.T) {
	credStatusJSON := `{
		"id": "did:polygonid:polygon:mumbai:2qHjMLYdcnQ39SFXLhujJe35ZRm9X8zcqUo3nR7PJ9/credentialStatus?revocationNonce=2407271101&contractAddress=80001:0x76EB7216F2400aC18C842D8C76739F3B8E619DB9&state=325723250b520e12a42b26330144a8462b45245a498af755f1cb925580340c0f",
		"revocationNonce": 2407271101,
		"type": "Iden3OnchainSparseMerkleTreeProof2023"
	}`

	var credStatus verifiable.CredentialStatus
	err := json.Unmarshal([]byte(credStatusJSON), &credStatus)
	require.NoError(t, err)

	issuerDID, err := w3c.ParseDID("did:polygonid:polygon:mumbai:2qHjMLYdcnQ39SFXLhujJe35ZRm9X8zcqUo3nR7PJ9")
	require.NoError(t, err)
	stateAddr := common.HexToAddress("0x134B1BE34911E39A8397ec6289782989729807a4")
	client, err := ethclient.Dial("http://my-rpc/v2/1111")
	require.NoError(t, err)
	var ethClients map[core.ChainID]*ethclient.Client = make(map[core.ChainID]*ethclient.Client)
	ethClients[80001] = client

	config := OnChainResolverConfig{
		IssuerDID:         issuerDID,
		EthClients:        ethClients,
		StateContractAddr: stateAddr,
	}

	onChainResolver := OnChainResolver{config}

	httpmock.Activate()
	defer httpmock.DeactivateAndReset()

	httpmock.RegisterMatcherResponder("POST", "http://my-rpc/v2/1111",
		httpmock.BodyContainsString(`{"jsonrpc":"2.0","id":1,"method":"eth_call","params":[{"data":"0xb4bdea55000af701e50b7414a0d1e05669487bf90a4e61fa7e031a73070a2543f1731202","from":"0x0000000000000000000000000000000000000000","to":"0x134b1be34911e39a8397ec6289782989729807a4"},"latest"]}`),
		httpmock.NewStringResponder(200, `{"jsonrpc":"2.0","id":1,"result":"0x000af701e50b7414a0d1e05669487bf90a4e61fa7e031a73070a2543f17312022f129fd9ea47a95fd13c5205e813ad32636abfb5e6d731dcf8c129d3cca880d800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065a79fd200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002ac964c0000000000000000000000000000000000000000000000000000000000000000"}`))

	httpmock.RegisterMatcherResponder("POST", "http://my-rpc/v2/1111",
		httpmock.BodyContainsString(`{"jsonrpc":"2.0","id":2,"method":"eth_call","params":[{"data":"0x110c96a7000af701e50b7414a0d1e05669487bf90a4e61fa7e031a73070a2543f1731202000000000000000000000000000000000000000000000000000000008f7c0abd","from":"0x0000000000000000000000000000000000000000","to":"0x76eb7216f2400ac18c842d8c76739f3b8e619db9"},"latest"]}`),
		httpmock.NewStringResponder(200, `{"jsonrpc":"2.0","id":2,"result":"0x00000000000000000000000000000000000000000000000000000000000000202f129fd9ea47a95fd13c5205e813ad32636abfb5e6d731dcf8c129d3cca880d81530b53742768d91fd4b17e9ebbd276270cf00885feee7d9a013722ead3f5cf900000000000000000000000000000000000000000000000000000000000000002e29026e7eda49f6cd839e02ca72fd0bba794804757f02007ef39dda84bfaa7f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000008f7c0abd}
	`))

	status, err := onChainResolver.Resolve(context.Background(), credStatus)
	require.NoError(t, err)
	require.NotNil(t, status)
	require.Equal(t, *status.Issuer.State, "d880a8ccd329c1f8dc31d7e6b5bf6a6332ad13e805523cd15fa947ead99f122f")
	require.Equal(t, *status.Issuer.RootOfRoots, "7faabf84da9df37e00027f75044879ba0bfd72ca029e83cdf649da7e6e02292e")
	require.Equal(t, *status.Issuer.ClaimsTreeRoot, "f95c3fad2e7213a0d9e7ee5f8800cf706227bdebe9174bfd918d764237b53015")
	require.Equal(t, *status.Issuer.RevocationTreeRoot, "0000000000000000000000000000000000000000000000000000000000000000")
	require.Equal(t, status.MTP.Existence, false)

}
